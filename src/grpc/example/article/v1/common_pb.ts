// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file example/article/v1/common.proto (package example.article.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message example.article.v1.Article
 */
export class Article extends Message<Article> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string content = 3;
   */
  content = "";

  /**
   * @generated from field: example.article.v1.ArticleUser user = 4;
   */
  user?: ArticleUser;

  constructor(data?: PartialMessage<Article>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.article.v1.Article";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user", kind: "message", T: ArticleUser },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Article {
    return new Article().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Article {
    return new Article().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Article {
    return new Article().fromJsonString(jsonString, options);
  }

  static equals(a: Article | PlainMessage<Article> | undefined, b: Article | PlainMessage<Article> | undefined): boolean {
    return proto3.util.equals(Article, a, b);
  }
}

/**
 * @generated from message example.article.v1.ArticleUser
 */
export class ArticleUser extends Message<ArticleUser> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<ArticleUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.article.v1.ArticleUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArticleUser {
    return new ArticleUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArticleUser {
    return new ArticleUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArticleUser {
    return new ArticleUser().fromJsonString(jsonString, options);
  }

  static equals(a: ArticleUser | PlainMessage<ArticleUser> | undefined, b: ArticleUser | PlainMessage<ArticleUser> | undefined): boolean {
    return proto3.util.equals(ArticleUser, a, b);
  }
}

